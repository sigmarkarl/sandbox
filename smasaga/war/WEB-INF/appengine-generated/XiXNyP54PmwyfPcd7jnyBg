<?xml version="1.0"?>
<!-- ======================================================= -->
<!-- ======================================================= -->
<!-- Build file for Cytoscape 			        -->
<!-- Created by Ethan Cerami, cerami@cbio.mskcc.org	-->
<!-- To get a quick listing of all ant targets, type: 	-->
<!-- ant -projecthelp                                   -->
<!-- ======================================================= -->
<!-- ======================================================= -->

<project name="Cytoscape" default="jar" basedir=".">

	<!-- =========================================================== -->
	<!-- Define Directories and other environment variables  -->
	<!-- =========================================================== -->

	<!-- Property file for any local build variables like the local webhost -->
	<property file="build.properties" />
	
	<!-- The directory containing library jar files -->
	<property name="lib.dir" value="${basedir}/lib" />

	<!-- Read in the system environment variables --> 
	<property environment="env"/>

	<!-- The directory containing library jar files only for -->
	<!-- testing and building. These files should not be in the -->
	<!-- release lib directory.  -->
	<property name="buildlib.dir" value="${lib.dir}/build-libs" />

	<!-- The directory containing source code -->
	<property name="src.dir" value="${basedir}/src" />

	<!-- The directory containing unit test source code -->
	<property name="tests.dir" value="${basedir}/tests" />

	<!-- The directory containing resources -->
	<property name="resources.dir" value="${basedir}/resources" />

	<!-- Temporary build directory -->
	<!-- Any file generated by a build target should go in the build dir. -->
	<property name="build.dir" value="${basedir}/build" />

	<!-- JUnit report directory -->
	<property name="junit.report.dir" value="${build.dir}/junit-reports" />

	<!-- Temporary compiled classes directory -->
	<property name="build.classes" value="${build.dir}/classes" />

	<!-- Global "magic" property for <javac> -->
	<property name="build.compiler" value="modern" />

	<!-- Location of the corelibs sources (for javadocs) -->
	<property name="corelibs.dir" value="${basedir}/../corelibs/" />

	<!-- Release number -->
	<!-- You should use version wherever you need to reference the
	     version for something.  Note that version.num is ONLY a number. 
	     This is primarily to support windows versioning.  Do NOT add 
	     letters, "beta", etc.  to version.num.  
	     Extra information can, however, be added to version. -->
	<property name="version.num" value="2.7.0" />
	<property name="version" value="${version.num}" />
	<property name="dirname.release.dir" value="cytoscape-v${version}" />
	<property name="java.target_version" value="1.5" />

	<!-- Web Start Directory -->
	<property name="webstart.dir" value="${build.dir}/webstart" />

	<!-- Temporary Release Directory -->
	<property name="release.dir" value="${build.dir}/${dirname.release.dir}" />

	<!-- Temporary directory for all distribution files -->
	<property name="dist.dir" value="${build.dir}/dist" />

	<!-- Manifest file name -->
	<property name="manifest.file" value="${build.dir}/Cytoscape.manifest" />

	<!-- Javadoc directories -->
	<property name="javadoc.dir" value="${build.dir}/API" />

	<!-- The XML Schema Directory used by JAXB -->
	<property name="schema.dir" value="${basedir}/resources/schema" />

	<!-- XML Schema files used by JAXB -->
	<property name="xgmml.schema" value="xgmml.xsd" />
	<property name="cysession.schema" value="cysession.xsd" />
	<property name="bookmark.schema" value="bookmarks.xsd" />

	<!-- Auto generated package name -->
	<property name="package" value="cytoscape.generated" />

	<!-- Check to see if install4j is available -->
	<available property="install4j.available" 
	           file="${env.INSTALL4J_HOME}/bin/install4j.jar"/>

	<!-- ======================================================= -->
	<!-- Cytoscape ClassPath definition                          -->
	<!-- ======================================================= -->

	<!-- Classpath with all lib JAR Files -->
	<path id="classpath">
		<pathelement path="${build.classes}" />
		<!-- <pathelement path="${basedir}"/> -->
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${buildlib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${basedir}/extra-jars"/>

	</path>

	<!-- ======================================================= -->
	<!-- For XJC compiler task -->
	<!-- ======================================================= -->
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath refid="classpath" />
	</taskdef>

	<!-- ======================================================= -->
	<!-- For converting SVG files to PNGs.  Specifically for     -->
	<!-- creating the splash screen.      -->
	<!-- ======================================================= -->
	<taskdef name="rasterize" 
	         classname="org.apache.tools.ant.taskdefs.optional.RasterizerTask">
		<classpath refid="classpath" />
	</taskdef>


	<!-- ======================================================= -->
	<!-- Clean generated packages -->
	<!-- ======================================================= -->
	<target name="clean-generated" description="Delete XJC generated packages.">

		<!-- Clean up generated packages -->
		<delete dir="${src.dir}/cytoscape/generated" />
		<delete dir="${src.dir}/cytoscape/generated2" />
		<delete dir="${src.dir}/cytoscape/bookmarks" />
	</target>

	<!-- ======================================================= -->
	<!-- Generate package using XJC compiler            -->
	<!-- ======================================================= -->
	<target name="bind" description="Run XJC to generate new packages.">

		<xjc schema="${schema.dir}/${cysession.schema}" 
					destdir="${src.dir}" 
		     package="${package}">
			<produces dir="${src.dir}/cytoscape/generated" 
			          includes="* impl/*" />
		</xjc>
		<!--
		<xjc schema="${schema.dir}/${xgmml.schema}" 
					destdir="${src.dir}" 
		     package="${package}2" 
		     extension="true" 
		     binding="${schema.dir}/binding.xjb">
			<arg value="-nv" />
			<produces dir="${src.dir}/cytoscape/generated2" includes="* impl/*" />
		</xjc>
		-->
		
		<xjc schema="${schema.dir}/${bookmark.schema}" 
				destdir="${src.dir}" 
		     package="cytoscape.bookmarks">
			<arg value="-nv" />
			<produces dir="${src.dir}/cytoscape/bookmarks" includes="* impl/*" />
		</xjc>
		
		<!-- copy prop file into build dir -->
		<echo>Copying jaxb.properties from ${src.dir}/cytoscape/generated to build dir...</echo>
		<copy todir="${build.classes}/cytoscape/generated">
			<fileset dir="${src.dir}/cytoscape/generated" includes="*.properties" />
		</copy>

		<copy todir="${build.classes}/cytoscape/bookmarks">
			<fileset dir="${src.dir}/cytoscape/bookmarks" includes="*.properties" />
		</copy>
	</target>


	<!-- ======================================================= -->
	<!-- Environment Information                                 -->
	<!-- ======================================================= -->

	<!-- Outputs Current compilation classpath -->
	<target name="show_cp">
		<property name="temp" refid="classpath" />
		<echo message="Classpath:  ${temp}" />
	</target>

	<!-- ======================================================= -->
	<!-- Create Build directories and copy images                -->
	<!-- ======================================================= -->

	<!-- Target to create the build directories prior to compilation -->
	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />

		<!-- copy over images -->
		<copy todir="${build.classes}/cytoscape/images">
			<fileset dir="${basedir}/images" />
		</copy>
		<copy todir="${build.classes}/cytoscape/view/images">
			<fileset dir="${basedir}/images" />
		</copy>
		<copy todir="${build.classes}/cytoscape/dialogs/images">
			<fileset dir="${src.dir}/cytoscape/dialogs/images" />
		</copy>
		<copy todir="${build.classes}/cytoscape/visual/ui/images">
			<fileset dir="${src.dir}/cytoscape/visual/ui/images" />
		</copy>


		<copy todir="${build.classes}">
			<fileset dir="${src.dir}" includes="**/*.xml" />
		</copy>
		<copy todir="${build.classes}">
			<fileset dir="${tests.dir}" includes="**/*.xml" />
		</copy>

		<antcall target="splash" />
		
	</target>

	<!-- ======================================================= -->
	<!-- Create the PNG splash screen from the SVG file with the -->
	<!-- proper version number substituted in. -->
	<!-- ======================================================= -->
	<target name="splash">
	        <filter token="version" value="${version}"/>
		<echo>
            ---------------------------------------
           	Creating splash and about screens 
            ---------------------------------------
        	</echo>
		<copy file="images/CytoscapeSplashScreen.svg" 
	              tofile="${build.classes}/cytoscape/images/CytoscapeSplashScreen.svg" 
		      filtering="true"
		      overwrite="true"/>
	        <filter token="version" value="${version}"/>
		<copy file="images/CytoscapeCredits.svg" 
	              tofile="${build.classes}/cytoscape/images/CytoscapeCredits.svg" 
		      filtering="true"
		      overwrite="true"/>
		<available property="splashUpToDate" 
		           file="${build.classes}/cytoscape/images/CytoscapeSplashScreen.png"/>
		<antcall target="createSplash" />
	</target>
	<target name="createSplash" unless="splashUpToDate" >
	        <rasterize src="${build.classes}/cytoscape/images/CytoscapeSplashScreen.svg"
			   dest="${build.classes}/cytoscape/images/CytoscapeSplashScreen.png" />
	        <rasterize src="${build.classes}/cytoscape/images/CytoscapeCredits.svg"
			   dest="${build.classes}/cytoscape/images/CytoscapeCredits.png" />
	</target>

	<!-- ======================================================= -->
	<!-- Clean the build environment                             -->
	<!-- ======================================================= -->

	<!--  Target to clean out all directories -->
	<target name="clean" depends="clean-generated" description="Removes all generated files.">
		<delete dir="${build.dir}" />
		<delete file="${basedir}/cytoscape.jar" />
	</target>

	<!-- ======================================================= -->
	<!-- Compile Cytoscape                                       -->
	<!-- ======================================================= -->
	<!--  Target to compile all code -->
	<target name="compile" 
	        depends="prepare, bind" 
		description="Compiles all source code.">
		<javac 
		       destdir="${build.classes}" 
		       nowarn="off" 
		       debug="true" 
		       source="${java.target_version}" 
		       target="${java.target_version}"
		       optimize="on" 
		       includeAntRuntime="false" 
		       deprecation="yes">
			<classpath refid="classpath" />
			<include name="cytoscape/**" />
			<src path="${src.dir}" />
			<src path="${tests.dir}" />
			<compilerarg line="-Xmaxwarns 10000" />
		</javac>

		<!-- Run RMIC for BioDataServer -->
		<rmic classname="cytoscape.data.servers.BioDataServerRmi" 
		      base="${build.classes}" 
		      classpathref="classpath" />

		<!-- copy resources/ directory to build area -->
		<echo>Copying resources/ directory to build</echo>
		<copy todir="${build.classes}/cytoscape/resources">
			<fileset dir="${basedir}/resources" />
			<fileset file="${basedir}/resources/props/tax_report.txt" />
		</copy>


		<!-- build help system -->
		<antcall target="help" />

	</target>

	<!-- ======================================================= -->
	<!-- Generates cytoscape manual - see build file in docs     -->
	<!-- dir for details.                                        -->
	<!-- ======================================================= -->
	<target name="manual"> 
		<ant dir="docs" target="all"/>	
	</target>

	<!-- ======================================================= -->
	<!-- Build Cytoscape Help - Index html source files etc.     -->
	<!-- ======================================================= -->
	<target name="help" 
	        description="Builds Help system files (full text search db, etc).">
		<!-- Check to see if the help files need to be indexed... -->
		<uptodate property="helpIsUpToDate" 
		          targetfile="${build.classes}/cytoscape/help/JavaHelpSearch/SCHEMA">
			<srcfiles dir="${basedir}/docs/help" includes="**/*" />
		</uptodate>
		<antcall target="buildHelp" />
	</target>

	<target name="buildHelp" 
	        unless="helpIsUpToDate">
		<!-- Copy the JavaHelp system files and html source over to build area -->
		<echo>Copying javahelp files: helpset, html files, images</echo>
		<copy todir="${build.classes}/cytoscape/help">
			<fileset dir="${basedir}/docs/help" />
		</copy>
		<mkdir dir="${build.classes}/cytoscape/help/images"/>
		<copy todir="${build.classes}/cytoscape/help/images">
			<fileset dir="${basedir}/docs/images" />
		</copy>

		<!-- then index the help files in the build area -->
		<echo>Indexing help files and creating search db</echo>
		<java classname="com.sun.java.help.search.Indexer" 
		      classpathref="classpath" 
		      dir="${build.classes}/cytoscape/help" 
		      fork="true">
			<arg value="-db" />
			<arg value="JavaHelpSearch" />
			<arg value="${build.classes}/cytoscape/help" />
		</java>
	</target>


	<!-- ======================================================= -->
	<!-- Run Cytoscape                                           -->
	<!-- ======================================================= -->

	<!--  Target to Run Cytoscape -->
	<target name="run" depends="test" description="Runs Cytoscape.">
		<java jar="${basedir}/cytoscape.jar" fork="true">
			<arg value="-p" />
			<arg value="plugins/core" />
		</java>
	</target>

	<!-- ========================================================= -->
	<!-- Make the Full JavaDocs for Cytoscape (including key libs) -->
	<!-- ========================================================= -->
	<target name="doc" description="Runs JavaDoc.">
		<javadoc destdir="${javadoc.dir}" 
		         source="1.5" 
		         breakiterator="true" 
		         Windowtitle="Cytoscape ${version} API" 
		         header="Cytoscape ${version} (c) 2006,2007 ISB, MSKCC, UCSD" 
		         footer="www.cytoscape.org" 
		         classpathref="classpath" 
		         access="public">

			<packageset dir="${src.dir}">
				<include name="cytoscape/**" />
				<!-- exclude xjc generated code -->
				<exclude name="cytoscape/generated/" />
				<exclude name="cytoscape/generated2/" />
				<exclude name="cytoscape/bookmarks/" />
			</packageset>
			<packageset dir="${corelibs.dir}/ding/src">
				<include name="**" />
				<exclude name="ding/view/test/" />
			</packageset>
			<packageset dir="${corelibs.dir}/fing/src">
				<include name="**" />
				<exclude name="fing/model/test/" />
			</packageset>
			<packageset dir="${corelibs.dir}/giny/src">
				<include name="**" />
			</packageset>
			<packageset dir="${corelibs.dir}/task/src">
				<include name="cytoscape/**" />
			</packageset>
			<packageset dir="${corelibs.dir}/undo.support/src">
				<include name="undo/**" />
			</packageset>
			<packageset dir="${corelibs.dir}/util.intr/src">
				<include name="cytoscape/**" />
				<exclude name="cytoscape/util/intr/test/" />
			</packageset>

			<link href="http://java.sun.com/j2se/1.5/docs/api/" />
			<!-- link href="http://csbi.sourceforge.net/API/" / -->
		</javadoc>
	</target>

	<!-- ======================================================= -->
	<!-- Make the JavaDocs for cytoscape jar ONLY                -->
	<!-- ======================================================= -->
	<target name="doc-simple" description="Runs JavaDoc.">
		<javadoc destdir="${javadoc.dir}" 
		         source="1.5" 
		         breakiterator="true" 
		         Windowtitle="Cytoscape ${version} API" 
		         header="Cytoscape ${version} (c) 2006,2007 ISB, MSKCC, UCSD" 
		         footer="www.cytoscape.org" 
		         classpathref="classpath" 
		         access="public">

			<packageset dir="${src.dir}">
				<include name="cytoscape/**" />
				<!-- exclude xjc generated code -->
				<exclude name="cytoscape/generated/" />
				<exclude name="cytoscape/generated2/" />
				<exclude name="cytoscape/bookmarks/" />
			</packageset>
		
			<link href="http://java.sun.com/j2se/1.5/docs/api/" />
		</javadoc>
	</target>

	<!-- ======================================================= -->
	<!-- Manfiest Target                                         -->
	<!-- Automatically creates Cytoscape Manifest File, based on -->
	<!-- JAR Files located in cytoscape.lib                      -->
	<!-- ======================================================= -->
	<target name="generate_manifest" depends="prepare">
		<echo>
            ***********************************************
            Creating Cytoscape Manifest File
            ***********************************************
        	</echo>
		<path id="manifest.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
		<pathconvert property="manifest.classpath.string"
			     pathsep=" ">
			<path refid="manifest.classpath" />
			<chainedmapper>
				<flattenmapper/>
				<globmapper from="*" to="lib/*" handledirsep="yes" />
			</chainedmapper>
		</pathconvert>
		<manifest file="${manifest.file}">
			<attribute name="Main-Class" value="cytoscape.CyMain" />
			<attribute name="Class-Path" value="${manifest.classpath.string}" />
			<attribute name="Java-Version" value="${java.target_version}" />
		</manifest>
	</target>

	<!-- ======================================================= -->
	<!-- Create the Cytoscape Jar file                           -->
	<!-- ======================================================= -->

	<!--  Target to Create Cytoscape Jar File  -->
	<target name="jar" 
	        depends="compile, generate_manifest" 
		description="Creates Cytoscape Jar File.">

		<echo>
            ***********************************************
            Creating Cytoscape JAR File
            ***********************************************
	       	</echo>

		<copy file="${basedir}/resources/javax.imageio.spi.ImageWriterSpi" 
		      todir="${build.dir}/temp/META-INF/services" />
		<copy file="${basedir}/resources/org.freehep.util.export.ExportFileType" 
		      todir="${build.dir}/temp/META-INF/services" />
		<copy file="${basedir}/resources/props/vizmap.props" 
		      todir="${build.classes}" />

	        <filter token="version" value="${version.num}"/>
		<copy file="${basedir}/resources/props/cytoscape.props" 
		      todir="${build.classes}" 
		      filtering="true"
		      overwrite="true"/>

		<jar destfile="${basedir}/cytoscape.jar" 
		     manifest="${manifest.file}">
			<fileset dir="${build.classes}" />
			<fileset dir="${build.dir}/temp" />
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Runs the tests in the project jar quickly, and sets a property      -->
	<!-- if a test fails.                                                    -->
	<!-- =================================================================== -->
	<target name="test" depends="jar">

		<echo>
            ***********************************************
            Running all unit tests (quickly). 
            ***********************************************
	      </echo>
		<mkdir dir="${junit.report.dir}" />
		<mkdir dir="${junit.report.dir}/fast" />
		<junit printsummary="yes" 
		       haltonfailure="no" 
		       maxmemory="512m">
			<!-- We need a new classpath so that AllTests is read from
	     the cytoscape.jar file instead of the build dir which
	     allows it reflect on the jar file and find other tests. -->
			<classpath>
				<fileset dir="${basedir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<formatter type="plain" usefile="true" />
			<formatter type="xml" usefile="true" />
			<test name="cytoscape.AllTests" 
			      fork="yes" 
			      todir="${junit.report.dir}/fast" 
			      failureProperty="junit.test.failure" 
			      errorProperty="junit.test.failure">
			</test>
		</junit>
		<junitreport todir="${junit.report.dir}/fast">
			<fileset dir="${junit.report.dir}/fast">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}/fast" />
		</junitreport>
		<fail message="JUnit Tests failed! Check ${junit.report.dir}/fast/index.html for details. Run 'ant test-slow' for more useful output." 
		      if="junit.test.failure" />
	</target>


	<!-- ======================================================= -->
	<!-- Run All of the Cytoscape Unit Tests without gui         -->
	<!-- and generates an html report. This task is only run     -->
	<!-- if the test-fast case fails.                            -->
	<!-- ======================================================= -->
	<target name="test-slow" depends="jar">
		<echo>
            ***********************************************
            Running all unit tests individually. 
            ***********************************************
	      </echo>
		<mkdir dir="${junit.report.dir}" />
		<junit printsummary="yes" 
		       haltonfailure="no" 
		       maxmemory="512m">
			<classpath refid="classpath" />
			<formatter type="plain" usefile="true" />
			<formatter type="xml" usefile="true" />
			<batchtest fork="yes" 
			           todir="${junit.report.dir}" 
				   failureProperty="junit.test.failure">
				<fileset dir="${src.dir}" 
				         includes="**/*Test.java" 
					 excludes="**/AllTests.java" />
				<fileset dir="${tests.dir}" 
				         includes="**/*Test.java" 
					 excludes="**/AllTests.java" />
			</batchtest>
		</junit>

		<junitreport todir="${junit.report.dir}">
			<fileset dir="${junit.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>

		<fail message="JUnit Tests failed! Check ${junit.report.dir}/index.html for details." 
		      if="junit.test.failure" />

	</target>

	<!-- ======================================================= -->
	<!-- Run All of the Cytoscape Unit Tests                     -->
	<!-- ======================================================= -->
	<target name="test-gui" 
	        depends="jar" 
		description="Runs all Cytoscape Unit Tests.">

		<!-- Create a new classpath so that we're running from a jar file 
	             which is needed by AllTests. -->
		<path id="junit.classpath">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<java classname="cytoscape.AllTests" 
		      classpathref="junit.classpath" 
		      fork="true" 
		      maxmemory="512m">
			<arg line="-ui" />
		</java>
	</target>

	<!-- ======================================================= -->
	<!-- Run all of the Swing Unit Tests                         -->
	<!-- ======================================================= -->
	<target name="test-swing" depends="jar">
		<mkdir dir="${junit.report.dir}" />
		<junit printsummary="yes" 
		       haltonfailure="no" 
		       maxmemory="512m" showoutput="on">
			<classpath refid="classpath" />
			<formatter type="plain" usefile="true" />
			<formatter type="xml" usefile="true" />
			<batchtest fork="yes" 
			           todir="${junit.report.dir}" 
				   failureProperty="junit.test.failure">
				<fileset dir="${tests.dir}" 
				         includes="**/*TestSwing.java" />
			</batchtest>
		</junit>

		<junitreport todir="${junit.report.dir}">
			<fileset dir="${junit.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>

		<fail message="JUnit Tests failed! Check ${junit.report.dir}/index.html for details." 
		      if="junit.test.failure" />

	</target>

	<!-- ======================================================= -->
	<!-- Run all of the JFC Unit Tests                         -->
	<!-- ======================================================= -->
	<target name="test-jfc" depends="jar">
		<mkdir dir="${junit.report.dir}" />
		<junit printsummary="yes" 
		       haltonfailure="no" 
		       maxmemory="512m">
			<classpath refid="classpath" />
			<formatter type="plain" usefile="true" />
			<formatter type="xml" usefile="true" />
			<batchtest fork="yes" 
			           todir="${junit.report.dir}" 
				   failureProperty="junit.test.failure">
				<fileset dir="${tests.dir}" 
				         includes="**/*TestJFC.java" />
			</batchtest>
		</junit>

		<junitreport todir="${junit.report.dir}">
			<fileset dir="${junit.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>

		<fail message="JUnit Tests failed! Check ${junit.report.dir}/index.html for details." 
		      if="junit.test.failure" />

	</target>

	<!-- ======================================================= -->
	<!-- Creates the release files used for the distribution     --> 
	<!--                                                         -->
	<!-- Use the  "dist"  target to create a Cytoscape release.  --> 
	<!--                                                         -->
	<!-- ======================================================= -->
	<target name="release" 
	        depends="jar, test" 
		description="Creates Cytoscape Release">

		<echo>
            ***********************************************
            Creating Cytoscape Release
            ***********************************************
	        </echo>

		<!-- Create Release Directory -->
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.dir}/plugins" />
		<mkdir dir="${release.dir}/sampleData" />

		<echo>
            ---------------------------------------
            Copying over all necessary JAR files.
            ---------------------------------------
		</echo>

		<copy file="${basedir}/cytoscape.jar" tofile="${release.dir}/cytoscape.jar" />

		<copy toDir="${release.dir}/lib">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</copy>


		<echo>
            ---------------------------------------
            Copying over all OS-specific scripts.
            ---------------------------------------
		</echo>
		<copy file="resources/bin/cytoscape.bat" todir="${release.dir}" />
		<copy file="resources/bin/cytoscape.sh" todir="${release.dir}" />
		<copy file="resources/bin/gen_vmoptions.sh" todir="${release.dir}" />
		<copy file="resources/bin/gen_vmoptions.bat" todir="${release.dir}" />
		<chmod perm="+x" file="${release.dir}/cytoscape.sh" />
		<chmod perm="+x" file="${release.dir}/gen_vmoptions.sh" />


		<echo>
            ------------------------------------------------------
            Copying over user documentation and Cytoscape License.
            ------------------------------------------------------
    		</echo>
		<copy file="docs/LICENSE.txt" todir="${release.dir}" />
		<copy file="docs/LICENSE.html" todir="${release.dir}" />
		<mkdir dir="${release.dir}/docs"/>
	        <filter token="version" value="${version}"/>
		<copy file="docs/INSTALL.txt" todir="${release.dir}/docs" filtering="true"/>
		<copy todir="${release.dir}/docs">
			<fileset dir="docs/pdf">
				<include name="*.pdf"/>
			</fileset>
			<fileset dir="docs/html">
				<include name="*.html"/>
			</fileset>
		</copy>
		<mkdir dir="${release.dir}/docs/images"/>
		<copy todir="${release.dir}/docs/images">
			<fileset dir="docs/images"/>
		</copy>


		<echo>
            ---------------------------------------
            Copying over sample data files.
            ---------------------------------------
		</echo>
		<copy file="testData/README_SAMPLE_DATA.txt" todir="${release.dir}/sampleData" />
		<copy file="testData/BINDyeast.sif" todir="${release.dir}/sampleData" />
		<copy file="testData/BINDhuman.sif" todir="${release.dir}/sampleData" />
		<copy file="testData/galExpData.pvals" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.gml" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.xgmml" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.sif" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.cys" todir="${release.dir}/sampleData" />
		<copy file="testData/yeastHighQuality.sif" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.edgeAttrs1" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.edgeAttrs2" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.nodeAttrs1" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.nodeAttrs2" todir="${release.dir}/sampleData" />
		<copy file="testData/galFiltered.nodeAttrTable.xls" todir="${release.dir}/sampleData" />
		<copy file="testData/galExpData.pvals" todir="${release.dir}/sampleData" />
		<copy file="testData/galExpData.probeset.pvals" todir="${release.dir}/sampleData" />
		<copy file="testData/gal.probeset.na" todir="${release.dir}/sampleData" />
		<copy file="testData/human_interactome_may07_small.tab.gz" todir="${release.dir}/sampleData" />
		<copy file="testData/Apoptosis_BioPAX.xml" todir="${release.dir}/sampleData" />
		<copy file="testData/sampleStyles.props" todir="${release.dir}/sampleData" />
		<copy file="testData/NNFData/Sample.nnf" todir="${release.dir}/sampleData" />
		
		<!-- Copy over Third Party Licenses -->
		<echo>
            ---------------------------------------
            Copying over third party licenses.
            ---------------------------------------
        	</echo>
		<mkdir dir="${release.dir}/licenses" />
		<copy todir="${release.dir}/licenses">
			<fileset dir="licenses">
				<include name="*.txt" />
				<include name="*.htm*" />
			</fileset>
		</copy>

		<!-- Copy over Release PlugIns -->
		<echo>
            ---------------------------------------
            Copying over PlugIns.
            ---------------------------------------
        	</echo>
		<copy todir="${release.dir}/plugins">
			<fileset dir="plugins/core">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="all" depends="release" />

	<target name="release-extras" 
	        depends="release" 
		description="add extra plugins into release">
		<echo>
            ---------------------------------------
            Copying over extra PlugIns.
            ---------------------------------------
        	</echo>
		<copy todir="${release.dir}/plugins">
			<fileset dir="plugins/extras">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>


	<!-- ======================================================= -->
	<!-- Creates a distribution based on the nightly build.      -->
	<!-- ======================================================= -->
	<target name="nightly-release" depends="release">
		<tstamp>
			<format property="todays.date" 
			        pattern="yyyy-MM-dd_hhmmaa" />
		</tstamp>
		<mkdir dir="${dist.dir}" />
		<zip destfile="${dist.dir}/cytoscape-${todays.date}.zip" 
		     basedir="${build.dir}" 
		     includes="${dirname.release.dir}/**" />
	</target>

	<!-- ======================================================= -->
	<!-- Create Zip files for distribution                       --> 
	<!-- Final releases are made available in zip_release/ dir   -->
	<!-- Questions?  email:  cerami@cbio.mskcc.org	             -->
	<!--                                                         -->
	<!-- Use the  "dist"  target to create a Cytoscape release.  --> 
	<!--                                                         -->
	<!-- ======================================================= -->
	<target name="zip_release" 
	        depends="release" 
		description="Creates Zipped Cytoscape Release Bundles">

		<echo>
            ---------------------------------------
            Creating zip/tar.gz release bundles.
            ---------------------------------------
		</echo>
		<mkdir dir="${dist.dir}" />

		<!-- Create Windows Zip Distribution -->
		<zip destfile="${dist.dir}/cytoscape-v${version}.zip" 
		     basedir="${build.dir}" 
		     includes="${dirname.release.dir}/**" />
		<!-- Stupid Ant does not preserve execute permissions. -->

		<!-- Create Unix/Linux/MaxOS X tar.gz Distribution -->
		<!-- Include Executable Permissions -->
		<tar tarfile="${dist.dir}/cytoscape-v${version}.tar">
			<tarfileset dir="${build.dir}" mode="755">
				<!-- Stupid Ant. -->
				<include name="${dirname.release.dir}/*.sh" />
				<include name="${dirname.release.dir}/*.bat" />
			</tarfileset>
			<!-- Stupid Ant makes this so hard when it's not. -->
			<tarfileset dir="${build.dir}">
				<!-- It's Java's fault. -->
				<include name="${dirname.release.dir}/**" />
				<exclude name="${dirname.release.dir}/*.sh" />
				<exclude name="${dirname.release.dir}/*.bat" />
			</tarfileset>
		</tar>
		<gzip src="${dist.dir}/cytoscape-v${version}.tar" 
		      zipfile="${dist.dir}/cytoscape-v${version}.tar.gz" />
		<delete file="${dist.dir}/cytoscape-v${version}.tar" />

	</target>

	<!--  Create tar.gz release of source code -->
	<!--  Note that the source tar because does not preserve -->
	<!--  individual permissions of files.  This is a bug in Ant/Java.  -->
	<target name="source" 
	        description="Generates a release .tar.gz of all source code">
		<tar tarfile="${dist.dir}/cytoscapeSource-v${version}.tar">
			<tarfileset dir="${basedir}">
				<exclude name="build/**" />
				<exclude name="CVS/**" />
				<exclude name=".svn/**" />
				<exclude name="*.log" />
			</tarfileset>
		</tar>
		<gzip src="${dist.dir}/cytoscapeSource-v${version}.tar" 
		      zipfile="${dist.dir}/cytoscapeSource-v${version}.tar.gz" />
		<delete file="${dist.dir}/cytoscapeSource-v${version}.tar" />
	</target>

	<!-- ======================================================= -->
	<!-- Creates the install bundles that users will use to      -->
	<!-- actually install cytoscape.                             -->
	<!-- NOTE - you MUST have install4j installed on your system -->
	<!-- with the environment variable INSTALL4J_HOME set and    -->
	<!-- pointing to said installation.                          -->
	<!-- The cytoscape team has a floating license, contact us   -->
	<!-- for access.                                             -->
	<!--                                                         -->
	<!-- Use the  "dist"  target to create a Cytoscape release.  --> 
	<!--                                                         -->
	<!-- ======================================================= -->
	<taskdef name="install4j"
	         classname="com.install4j.Install4JTask"
       	     classpath="${env.INSTALL4J_HOME}/bin/ant.jar"
			 onerror="ignore"/>
					                   
	<target name="install-bundles"
			if="install4j.available" >
		<echo>
	    ${env.INSTALL4J_HOME}	
            ---------------------------------------
            Creating install4j bundles 
            ---------------------------------------
        	</echo>
		<filter token="version" value="${version}"/>
		<filter token="windows_version" value="${version.num}"/>
		<copy file="tools/Cytoscape.install4j"
		      tofile="build/Cytoscape.install4j" 
		      filtering="true"
		      overwrite="true"/>
		<install4j projectfile="build/Cytoscape.install4j"/>
	</target>

	<!-- ======================================================= -->
	<!-- Creates all of the necessary installation files         --> 
	<!-- Use this target when you're ready to create a cytoscape --> 
	<!-- release.                                                --> 
	<!-- ======================================================= -->
	<target name="dist"
	        depends="zip_release,doc,install-bundles,source">
	  <copy toDir="${dist.dir}/javadoc">
			<fileset dir="${javadoc.dir}" includes="**"/>
 	  </copy>
	</target>


	<!-- ======================================================= -->
	<!-- Create Cytoscape WebStart Distribution                           -->
	<!-- Questions?  email:  cerami@cbio.mskcc.org	         -->
	<!-- ======================================================= -->

	<target name="jnlp.jar" depends="compile">
		<jar destfile="${basedir}/resources/JnlpWriter.jar"> 
			<fileset dir="${build.dir}/classes">
				<include name="cytoscape/util/JnlpWriterUtil.class"/>
			</fileset>
				<manifest>
					<attribute name="Main-Class" value="cytoscape.util.JnlpWriterUtil"/>
					<attribute name="Class-Path" value="../lib/jdom-1.0.jar"/>
			</manifest>
		</jar>
	</target>


	<target name="jnlp" depends="release, jnlp.jar" description="Creates jnlp for webstart">
		<fail message="You must specify a webstartURL argument when executing this task:    ant -DwebstartURL=http://yourdomain.com [ant target]">
			<condition>
				<not> <isset property="webstartURL"/> </not>
			</condition>
		</fail>

		<java jar="${basedir}/resources/JnlpWriter.jar" fork="true" failonerror="true">
			<arg value="-filename"/>
			<arg value="cy1.jnlp" />
			<arg value="-cyto_dir" />
			<arg value="${release.dir}" />
			<arg value="-url" />
			<arg value="${webstartURL}" />
			<arg value="-save_dir" /> 
			<arg value="${basedir}/resources/webstart" />
		</java>
	</target>
	
	<target name="webstart" depends="jnlp" description="Creates Cytoscape Webstart Release">

		<echo>
            ***********************************************
            Creating Cytoscape Webstart Release
            * NOTE: If this is your first time using Webstart:
            * you must create a keystore:
            * keytool -genkey -alias cytoscape -keypass secret
            * enter "secret" for the password. 
            ***********************************************
		</echo>

		<!-- Create Webstart Directory -->
		<mkdir dir="${webstart.dir}" />
		<mkdir dir="${webstart.dir}/plugins" />

		<echo>
            ---------------------------------------
            Copying over all necessary JAR files.
            ---------------------------------------
		</echo>

		<copy file="${basedir}/resources/webstart/cy1.jnlp" todir="${webstart.dir}" />

		<copy todir="${webstart.dir}">
			<fileset dir="${basedir}/resources/webstart">
				<exclude name="*.jsp"/>
			</fileset>
		</copy>
		


		
		<copy file="${basedir}/cytoscape.jar" tofile="${webstart.dir}/cytoscape.jar" />
		<signjar jar="${webstart.dir}/cytoscape.jar" alias="cytoscape" storepass="secret" />

		<copy toDir="${webstart.dir}/lib">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</copy>

		<signjar alias="cytoscape" storepass="secret">
			<fileset dir="${webstart.dir}/lib" includes="*.jar" />
		</signjar>



		<!-- Copy over props files -->
		<echo>
            ---------------------------------------
            Copying over all property files.
            ---------------------------------------
	        </echo>
		<copy file="${basedir}/resources/props/cytoscape.props" tofile="${webstart.dir}/cytoscape.props" />
		<copy file="${basedir}/resources/props/vizmap.props" tofile="${webstart.dir}/vizmap.props" />
		<copy file="${basedir}/resources/props/tax_report.txt" tofile="${webstart.dir}/tax_report.txt" />

		<!-- Copy over Webstart PlugIns -->
		<echo>
            ---------------------------------------
            Copying over PlugIns.
            ---------------------------------------
   	</echo>
		<copy todir="${webstart.dir}/plugins">
			<fileset dir="plugins/core">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${webstart.dir}/plugins">
			<fileset dir="plugins">
				<include name="*.jar" />
			</fileset>
		</copy>

		<signjar alias="cytoscape" storepass="secret">
			<fileset dir="${webstart.dir}/plugins" includes="*.jar" />
		</signjar>
	</target>
	
	
	<target name="webstart-extras" 
		description="add extra plugins into webstart">
		<echo>
            ---------------------------------------
            Copying over extra PlugIns.
            ---------------------------------------
   	</echo>
		<copy todir="${webstart.dir}/plugins">
			<fileset dir="plugins/extras">
				<include name="*.jar" />
			</fileset>
		</copy>

		<antcall target="webstart" />
		
	</target>

  <!-- ======================================================= -->
  <!-- Create Cytoscape WebStart WAR file Distribution         -->
  <!-- ======================================================= -->
	<target name="war" depends="webstart" description="Create war package for webstart distribution">
		<!-- Using jar rather that war task because we don't have a webxml file -->
 		<jar destfile="${build.dir}/Cytoscape.war">
			<fileset dir="${build.dir}/webstart">
				<include name="**/**"/>
			</fileset>
			<fileset dir="${basedir}/resources/webstart"/>
		</jar>
	</target>


  <property name="dir.jalopy" value="/mystuff/jalopy/bin" />
  <property name="dir.lib" value="${basedir}/ext/lib" />
  <property name="dir.compile" value="${basedir}/tmp~/build/classes" />
  <property name="dir.src.java" value="${basedir}/src/java" />

  <!-- ==================================================================== -->
  <!-- Defines the Jalopy task                                              -->
  <!-- ==================================================================== -->
  <taskdef name="jalopy"
           classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
    <classpath>
      <fileset dir="${buildlib.dir}/jalopy">
        <include name="*.jar" />
      </fileset>
    </classpath>
  </taskdef>


  <!-- ==================================================================== -->
  <!-- Formats all source files                                             -->
  <!-- ==================================================================== -->
  <target name="format" description="jalopy formatting">
    <jalopy convention="${resources.dir}/cytoscape_jalopy_code_convention.xml"
            classpathref="classpath">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
		<exclude name="generated/" />
		<exclude name="generated2/" />
		<exclude name="bookmarks/" />
      </fileset>
      <fileset dir="${tests.dir}">
        <include name="**/*.java" />
      </fileset>
    </jalopy>
  </target>
</project>
